<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
           
    <bean id="milton.resource.factory" class="com.ettrema.console.ConsoleResourceFactory">
        <constructor-arg ref="filesystem.resource.factory" />
        <constructor-arg value="/console" />
        <constructor-arg value="/webdav" /> <!-- resource to test authentication against = host root -->
        <constructor-arg>
            <list>
                <bean class="com.ettrema.console.LsFactory" />
                <bean class="com.ettrema.console.CdFactory" />
                <bean class="com.ettrema.console.RmFactory" />
                <bean class="com.ettrema.console.HelpFactory" />
                <bean class="com.ettrema.console.CpFactory" />
                <bean class="com.ettrema.console.MkFactory" />
                <bean class="com.ettrema.console.MkdirFactory" />
            </list>
        </constructor-arg>
        <constructor-arg value="webdav"/> <!-- the web context path -->
    </bean>

    <bean id="filesystem.resource.factory" class="gr.ebs.gss.server.webdav.milton.GSSResourceFactory">
        <property name="securityManager" ref="milton.fs.security.manager" />
        <property name="lockManager" ref="milton.fs.lock.manager" />
        
        <property name="maxAgeSeconds" value="3600" />
        <property name="contextPath" value="webdav"/>
        <!-- the default root is System property user.home  -->
        <!-- enable the property below to set the root elsewhere -->
        <!--
        <property name="root" value="/www/webs" />
        -->
    </bean>

<!--
    <bean id="milton.fs.security.manager" class="com.ettrema.http.fs.NullSecurityManager" >
        <property name="realm" value="aRealm" />
    </bean>
    com.ettrema.http.fs.SimpleSecurityManager
-->

    <bean id="milton.fs.security.manager" class="gr.ebs.gss.server.webdav.milton.GssSecurityManager" >
        <property name="realm" value="aRealm" />
        
    </bean>

    <bean id="milton.fs.lock.manager" class="gr.ebs.gss.server.webdav.milton.GssMemoryLockManager" />

    <bean id="auth.service" class="com.bradmcevoy.http.AuthenticationService">
        <property name="disableDigest" value="false"/>
        <property name="disableBasic" value="true"/>
    </bean>
<!--
    <bean id="milton.response.handler" class="com.bradmcevoy.http.MsOfficeResponseHandler"/>
-->

    <bean id="milton.response.handler" class="com.bradmcevoy.http.webdav.DefaultWebDavResponseHandler">
        <constructor-arg ref="auth.service"/>
    </bean>

    <!-- The compressing response handler wraps the default response handler and compresses
    response content. This will only actually perform compression for specific mime types
    (currently hard coded to text, css and js files) and if the client supports gzip -->
    <bean id="milton.response.handler.compressing" class="com.bradmcevoy.http.CompressingResponseHandler">
        <constructor-arg ref="milton.response.handler" />
    </bean>


    <bean id="milton.http.manager" class="com.bradmcevoy.http.HttpManager">
        <constructor-arg ref="milton.resource.factory" />
        <constructor-arg ref="milton.response.handler.compressing" />
        <constructor-arg ref="auth.service" />

        <property name="filters">
            <list>
            	<!-- This filter will save one file per request. Having
            	it enabled by default causes problems when taking
            	milton-fileserver-test for a spin as the system runs
            	slower and slower until it fails.
            	
            	Another manifistation of problems with this filter is
            	that Office 2010 will not put up the authentication 
            	requester, nor list the files in a folder.
            	
                <ref bean="milton.debug.filter" />
                -->
            </list>
        </property>

    </bean>
	
    <!-- If added to the http manager, this filter will output request and responses
    to the logger -->
    <bean id="milton.debug.filter" class="com.bradmcevoy.http.DebugFilter" >
        <!-- By default the debugfilter will log to the current user's home directory -->
        <!-- To change this behaviour uncomment the following line and set the path you want to log to-->
        <!--
        <constructor-arg value="/test"/>
        -->
    </bean>

    
</beans>
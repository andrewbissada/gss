<?xml version="1.0" encoding="utf-8" ?>
<project name="gss" default="deploy" basedir=".">
	<description>The GSS project build file</description>

	<property file="build.properties"/>
    <property name="deps.dir" value="dependencies"/>

	<!-- User-editable settings. These are the only settings in this file that
	a user may consider changing. Note that these can also be configured
	through	command line parameters (e.g. "ant -Dgwt.workers=2") or a
	build.properties file. -->
    <property name="gwt.workers" value="1" />
	<property name="jboss.home" value="${deps.dir}/jboss-5.1.0.GA" />
	<property name="appserver.home" value="${deps.dir}/jetty-distribution-7.1.6.v20100715" />

	<!-- Library and runtime dependencies -->
    <property name="gwt.path" value="${deps.dir}/gwt-2.0.4"/>
    <property name="gwt.filename" value="gwt-2.0.4.zip"/>
	<property name="gwt.download.url" value="http://google-web-toolkit.googlecode.com/files/${gwt.filename}"/>
    <property name="hornetq.path" value="${deps.dir}/hornetq-2.0.0.GA" />
    <property name="hornetq.filename" value="hornetq-2.0.0.GA.zip"/>
    <property name="hornetq.download.url" value="http://sourceforge.net/projects/hornetq/files/2.0.0.GA/${hornetq.filename}/download"/>
    <property name="junit.path" value="${deps.dir}/junit3.8.1" />
    <property name="junit.filename" value="junit3.8.1.zip"/>
    <property name="junit.download.url" value="http://sourceforge.net/projects/junit/files/junit/3.8.1/${junit.filename}/download"/>
    <property name="gwt-dnd.filename" value="gwt-dnd-3.0.1.jar"/>
    <property name="gwt-dnd.download.url" value="http://gwt-dnd.googlecode.com/files/${gwt-dnd.filename}"/>
    <property name="gwt-gears.path" value="${deps.dir}/gwt-gears-1.3.0" />
    <property name="gwt-gears.filename" value="gwt-gears-1.3.0.zip"/>
    <property name="gwt-gears.download.url" value="http://gwt-google-apis.googlecode.com/files/${gwt-gears.filename}"/>
    <property name="gwt-visualization.path" value="${deps.dir}/gwt-visualization-1.1.0" />
    <property name="gwt-visualization.filename" value="gwt-visualization-1.1.0.zip"/>
    <property name="gwt-visualization.download.url" value="http://gwt-google-apis.googlecode.com/files/${gwt-visualization.filename}"/>
    <property name="gwt-incubator.filename" value="gwt-incubator-20100204-r1747.jar"/>
    <property name="gwt-incubator.download.url" value="http://google-web-toolkit-incubator.googlecode.com/files/${gwt-incubator.filename}"/>
    <property name="guice.path" value="${deps.dir}/guice-2.0" />
    <property name="guice.filename" value="guice-2.0.zip"/>
    <property name="guice.download.url" value="http://google-guice.googlecode.com/files/${guice.filename}"/>
    <property name="mongo.filename" value="mongo-2.1.jar"/>
    <property name="mongo.download.url" value="http://github.com/downloads/mongodb/mongo-java-driver/${mongo.filename}"/>
    <property name="morphia.filename" value="morphia-0.95.jar"/>
    <property name="morphia.download.url" value="http://morphia.googlecode.com/files/${morphia.filename}"/>
    <property name="jetty.path" value="${deps.dir}/jetty-distribution-7.1.6.v20100715" />
    <property name="jetty.filename" value="jetty-distribution-7.1.6.v20100715.zip"/>
    <property name="jetty.download.url" value="http://download.eclipse.org/jetty/stable-7/dist/${jetty.filename}"/>
	
	<!-- Source and runtime layout configuration -->
	<property name="jboss_run_configuration" value="default" />
    <property name="gwt.module" value="gr.ebs.gss.GSS" />
    <property name="gwt.module.class" value="GSS" />
    <property name="gwt.admin.module" value="gr.ebs.gss.admin.TwoAdmin" />
    <property name="gwt.admin.module.class" value="TwoAdmin" />
	<property name="src.dir" value="${basedir}/src"/>
	<property name="jboss-spec.dir" value="${basedir}/jboss" />
    <property name="jboss-spec.conf.dir" value="${jboss-spec.dir}/conf" />
    <property name="jboss-spec.bin.dir" value="${jboss-spec.dir}/bin" />
    <property name="jboss-spec.deploy.dir" value="${jboss-spec.dir}/deploy" />
    <property name="jboss-spec.lib.dir" value="${jboss-spec.dir}/lib" />
    <property name="jboss.project" value="${basedir}/jboss-config/${jboss.version}" />
    <property name="jboss.bin.dir" value="${jboss.home}/bin" />
    <property name="jboss.conf.dir" value="${jboss.home}/server/${jboss_run_configuration}/conf" />
    <property name="jboss.deploy.dir" value="${jboss.home}/server/${jboss_run_configuration}/deploy" />
    <property name="jboss.run_conf.lib.dir" value="${jboss.home}/server/${jboss_run_configuration}/lib" />
    <property name="jboss.lib.dir" value="${jboss.home}/lib" />
    <property name="jboss.common.lib.dir" value="${jboss.home}/common/lib" />

	<!-- JUnit dirs -->
	<property name="test.dir" value="${basedir}/test" />
	<property name="test.src.dir" value="${test.dir}/src"/>

	<!-- Build dirs -->
	<property name="build.dir" value="${basedir}/bin" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
    <property name="conf.dir" value="${basedir}/conf" />
	<property name="test.build.dir" value="${build.dir}" />
	<property name="test.build.classes.dir" value="${test.build.dir}/" />
	<property name="gwt.www.dir" value="${basedir}/www" />
	<property name="gwt.www.admin.dir" value="${basedir}/wwwadmin" />
	<property name="dist.war" value="${ant.project.name}.war"/>
	<property name="dist.admin.war" value="${ant.project.name}-admin.war"/>
	<property name="webdav.war" value="webdav.war"/>
	<property name="war.dir" value="${basedir}/war" />
	<property name="war.web-inf.dir" value="${war.dir}/WEB-INF"/>
	<property name="war.lib.dir" value="${war.web-inf.dir}/lib"/>
	<property name="war.admin.dir" value="${basedir}/waradmin" />
	<property name="war.admin.web-inf.dir" value="${war.dir}/WEB-INF"/>
	<property name="war.admin.lib.dir" value="${war.web-inf.dir}/lib"/>
	<property name="webdav.war.dir" value="${basedir}/webdav" />
	<property name="webdav.war.web-inf.dir" value="${webdav.war.dir}/WEB-INF"/>
	<property name="webdav.war.lib.dir" value="${webdav.war.web-inf.dir}/lib"/>
	<property name="appserver.conf.dir" value="${appserver.home}/resources"/>

	<!-- set classpath -->
	<path id="project.class.path">
		<pathelement path="${java.class.path}/" />
		<pathelement path="${gwt.path}/gwt-user.jar" />
		<pathelement location="${jboss.common.lib.dir}/ejb3-persistence.jar"/>
        <pathelement location="${jboss.common.lib.dir}/jboss-javaee.jar"/>
        <pathelement location="${jboss.common.lib.dir}/jbosssx.jar"/>
		<pathelement location="${war.lib.dir}/commons-codec-1.4.jar"/>
        <pathelement location="${war.lib.dir}/commons-configuration-1.6.jar"/>
        <pathelement location="${war.lib.dir}/commons-fileupload-1.2.jar"/>
        <pathelement location="${war.lib.dir}/commons-httpclient-3.1.jar"/>
        <pathelement location="${war.lib.dir}/commons-lang.jar"/>
        <pathelement location="${war.lib.dir}/commons-logging.jar"/>
        <pathelement location="${war.lib.dir}/guice-2.0.jar"/>
        <pathelement location="${war.lib.dir}/guice-servlet-2.0.jar"/>
        <pathelement location="${war.lib.dir}/ldap.jar"/>
        <pathelement location="${war.lib.dir}/${mongo.filename}"/>
        <pathelement location="${war.lib.dir}/${morphia.filename}"/>
		<pathelement location="${junit.path}/junit.jar"/>
		<pathelement location="${deps.dir}/${gwt-dnd.filename}"/>
		<pathelement location="${gwt-gears.path}/gwt-gears.jar"/>
		<pathelement location="${deps.dir}/${gwt-incubator.filename}"/>
		<pathelement location="${gwt-visualization.path}/gwt-visualization.jar"/>
	</path>

	<target name="check-appserver">
		<available file="${appserver.home}" type="dir" property="appserver.home.present"/>
	</target>

    <target name="fetch-deps" description="Fetch the dpendencies" unless="appserver.home.present" depends="check-appserver">
    	<mkdir dir="${deps.dir}"/>
        <get src="${gwt.download.url}" dest="${deps.dir}/${gwt.filename}" usetimestamp="true"/>
        <get src="${gwt-dnd.download.url}" dest="${deps.dir}/${gwt-dnd.filename}" usetimestamp="true"/>
        <get src="${gwt-gears.download.url}" dest="${deps.dir}/${gwt-gears.filename}" usetimestamp="true"/>
        <get src="${gwt-visualization.download.url}" dest="${deps.dir}/${gwt-visualization.filename}" usetimestamp="true"/>
        <get src="${gwt-incubator.download.url}" dest="${deps.dir}/${gwt-incubator.filename}" usetimestamp="true"/>
        <get src="${guice.download.url}" dest="${deps.dir}/${guice.filename}" usetimestamp="true"/>
        <get src="${mongo.download.url}" dest="${deps.dir}/${mongo.filename}" usetimestamp="true"/>
        <get src="${morphia.download.url}" dest="${deps.dir}/${morphia.filename}" usetimestamp="true"/>
        <get src="${hornetq.download.url}" dest="${deps.dir}/${hornetq.filename}" usetimestamp="true"/>
        <get src="${junit.download.url}" dest="${deps.dir}/${junit.filename}" usetimestamp="true"/>
        <get src="${jetty.download.url}" dest="${deps.dir}/${jetty.filename}" usetimestamp="true"/>
    	<unzip src="${deps.dir}/${gwt.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${gwt-gears.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${gwt-visualization.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${guice.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${hornetq.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${junit.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${jetty.filename}" dest="${deps.dir}"/>
    </target>

    <target name="update-deps" depends="deinstall,fetch-deps"
    	   description="Fetch any newly-introduced dependencies">
    </target>

	<target name="install" depends="fetch-deps" description="Installs the configuration files of the application server">
		<!-- Install HornetQ configuration -->
		<!--copy todir="${jboss.run_conf.lib.dir}">
			<fileset dir="${hornetq.path}/lib">
				<include name="hornetq-*.jar"/>
				<include name="netty*.jar"/>
			</fileset>
		</copy>
		<property name="hornetq.sar.dir" value="${jboss.deploy.dir}/hornetq.sar"/>
		<mkdir dir="${hornetq.sar.dir}"/>
		<copy todir="${hornetq.sar.dir}">
			<fileset dir="${hornetq.path}/config/jboss-as/non-clustered" includes="*" excludes="**/jboss-as-4/**"/>
		</copy>
		<unzip src="${hornetq.path}/lib/hornetq-ra.rar" dest="${jboss.deploy.dir}/hornetq-ra.rar"/>
		<delete dir="${jboss.deploy.dir}/messaging" failonerror="false"/>
		<mkdir dir="${jboss.bin.dir}/META-INF/lib/linux2/x86"/>
		<mkdir dir="${jboss.bin.dir}/META-INF/lib/linux2/x64"/>
		<copy todir="${jboss.bin.dir}/META-INF/lib/linux2/x86" file="${hornetq.path}/bin/libHornetQAIO32.so"/>
		<copy todir="${jboss.bin.dir}/META-INF/lib/linux2/x64" file="${hornetq.path}/bin/libHornetQAIO64.so"/-->
		<!-- Install Guice -->
		<copy todir="${war.lib.dir}">
			<fileset dir="${guice.path}">
                <include name="guice-2.0.jar"/>
                <include name="guice-servlet-2.0.jar"/>
                <include name="aopalliance.jar"/>
			</fileset>
		</copy>
        <!-- Install Mongo driver and Morphia -->
        <copy todir="${war.lib.dir}">
            <fileset dir="${deps.dir}">
                <include name="${mongo.filename}"/>
                <include name="${morphia.filename}"/>
            </fileset>
        </copy>
		<!-- Install gss configuration -->
		<copy todir="${appserver.conf.dir}" overwrite="true" failonerror="false">
			<fileset dir="${conf.dir}"/>
		</copy>
        <!-- Make run.sh executable again -->
        <chmod file="${appserver.home}/bin/jetty.sh" perm="ugo+x"/>
	</target>

	<target name="compile" description="Compile src to bin">
		<mkdir dir="bin" />
		<javac srcdir="src:test" destdir="bin" debug="on" debuglevel="lines,vars,source" source="1.6">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<target name="package-code" depends="compile" description="Package up the project code as a jar">
		<jar destfile="${build.dir}/${ant.project.name}.jar">
			<fileset dir="bin">
				<include name="org/json/**" />
				<include name="**/client/AdminService.class" />
				<include name="**/server/**" />
                <include name="**/exceptions/**" />
                <exclude name="**/indexer/**" />
                <include name="**/Admin*" />
			</fileset>
			<fileset dir="src">
				<include name="**/*.xml" />
				<include name="**/client/exceptions/**" />
			</fileset>
		</jar>
	</target>

	<target name="package-webdav" depends="compile" description="Package up the webdav code as a jar">
		<jar destfile="${build.dir}/webdav.jar">
			<fileset dir="bin">
				<include name="**/webdav/**" />
			</fileset>
		</jar>
	</target>

	<target name="check-gwt-compile" depends="compile">
		<uptodate property="compilation-not-needed">
			<srcfiles dir="${src.dir}" excludes="**/server/**"/>
			<mergemapper to="${build.dir}/www/gr.ebs.gss.GSS.nocache.js"/>
		</uptodate>
	</target>

	<target name="gwt-compile" depends="check-gwt-compile" unless="compilation-not-needed" description="Compile client code to JavaScript">
		<java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true">
			<!--arg value="-style"/>
			<arg value="DETAILED"/-->
			<arg value="-localWorkers" />
			<arg value="${gwt.workers}" />
			<arg value="-war"/>
			<arg value="${gwt.www.dir}"/>
			<arg value="${gwt.module}"/>
			
		    <classpath>
		        <pathelement path="${gwt.path}/gwt-dev.jar"/>
				<path refid="project.class.path" />
				<pathelement path="${src.dir}" />
		    </classpath>
		</java>
		<mkdir dir="${build.dir}/www"/>
		<copy todir="${build.dir}/www">
			<fileset dir="${gwt.www.dir}/${gwt.module}" excludes="**/${gwt.module.class}.html">
			</fileset>
		</copy>
		<copy file="${gwt.www.dir}/${gwt.module}/${gwt.module.class}.html" tofile="${build.dir}/www/index.html" />
	</target>
	
	<target name="package-war" depends="gwt-compile, package-code" description="Package up the web part as an expanded war">
        <mkdir dir="${build.dir}/${ant.project.name}"/>
		<copy todir="${build.dir}/${ant.project.name}">
            <fileset dir="${war.dir}">
                <exclude name="**/classes/**"/>
            </fileset>
            <fileset dir="${build.dir}/www"/>
		</copy>
        <mkdir dir="${build.dir}/${ant.project.name}/WEB-INF/lib"/>
        <copy todir="${build.dir}/${ant.project.name}/WEB-INF/lib">
            <fileset dir="${build.dir}">
                <include name="${ant.project.name}.jar" />
            </fileset>
        </copy>
	</target>
	
	<target name="check-gwt-admin-compile" depends="compile">
		<uptodate property="compilation-not-needed">
			<srcfiles dir="${src.dir}" excludes="**/server/**"/>
			<mergemapper to="${build.dir}/wwwadmin/gr.ebs.gss.admin.TwoAdmin.nocache.js"/>
		</uptodate>
	</target>

	<target name="gwt-admin-compile" depends="check-gwt-admin-compile" unless="compilation-not-needed" description="Compile client code to JavaScript">
		<java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true">
			<!--arg value="-style"/>
			<arg value="DETAILED"/-->
			<arg value="-localWorkers" />
			<arg value="${gwt.workers}" />
			<arg value="-war"/>
			<arg value="${gwt.www.admin.dir}"/>
			<arg value="${gwt.admin.module}"/>
            <jvmarg value="-Xmx128m"/>						
		    <classpath>
		        <pathelement path="${gwt.path}/gwt-dev.jar"/>
				<path refid="project.class.path" />
				<pathelement path="${src.dir}" />
		    </classpath>
		</java>
		<mkdir dir="${build.dir}/wwwadmin"/>
		<copy todir="${build.dir}/wwwadmin">
			<fileset dir="${gwt.www.admin.dir}/${gwt.admin.module}" excludes="**/${gwt.admin.module.class}.html">
			</fileset>
		</copy>
		<copy file="${gwt.www.admin.dir}/${gwt.admin.module}/${gwt.admin.module.class}.html" tofile="${build.dir}/wwwadmin/index.html" />
	</target>
		
	<target name="package-admin-war" depends="gwt-admin-compile, package-code" description="Package up the web part as a war">
		<jar destfile="${build.dir}/${dist.admin.war}">
			<zipfileset dir="${war.admin.dir}" >
				  <exclude name="**/classes/**"/>
            </zipfileset>
			<zipfileset dir="${build.dir}/wwwadmin" />
			<zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
				<include name="${ant.project.name}.jar" />
			</zipfileset>
			<zipfileset dir="${gwt.path}" prefix="WEB-INF/lib">
				<include name="gwt-servlet.jar" />
			</zipfileset>
		</jar>
	</target>

	<target name="package-webdav-war" depends="package-webdav" description="Package up the WebDAV part as a war">
		<jar destfile="${build.dir}/${webdav.war}">
			<zipfileset dir="${webdav.war.dir}" />
			<zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
				<include name="webdav.jar" />
			</zipfileset>
		</jar>
	</target>

	<target name="deploy" depends="package-war" description="Deploy the project to the server">
        <mkdir dir="${appserver.home}/webapps/pithos"/>
        <copy todir="${appserver.home}/webapps/pithos">
            <fileset dir="${build.dir}/${ant.project.name}"/>
        </copy>
	</target>

	<target name="clean" description="Delete the contents of the bin and www directories">
		<delete dir="${build.dir}"/>
		<delete dir="${gwt.www.dir}"/>
		<delete dir="${gwt.www.admin.dir}"/>
	</target>

    <target name="deinstall"
    	description="Delete the contents of the application server home directory">
        <delete dir="${appserver.home}"/>
    </target>

    <target name="distclean" depends="deinstall, clean"
        description="Delete the contents of the application server home directory and all downloaded artifacts">
        <delete dir="${deps.dir}"/>
    </target>

	<target name="test" description="Performs unit tests on the project" depends="compile">
		<available
		      property="junit.present"
		      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
		      classpathref="project.class.path"/>
	    <fail unless="junit.present">
	      ##################################################################
	      JUnit not found.
	      Please make sure junit.jar is in ANT_HOME/lib, or made available
	      to Ant using other mechanisms like -lib or CLASSPATH.
	      ##################################################################
		</fail>

		<junit printsummary="withOutAndErr" fork="yes" haltonfailure="yes">
			<classpath refid="project.class.path"/>
			<formatter type="plain"/>
			<batchtest todir="${test.build.dir}">
				<fileset dir="${test.build.classes.dir}">
					<include name="**/*Test.class"/>
				</fileset>          
			</batchtest>

		</junit>
	</target>

	<target name="run" description="Starts the server" depends="deploy">
        <exec executable="java" dir="${appserver.home}">
            <arg line="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n"/>
            <arg line="-jar"/>
            <arg line="start.jar"/>
        </exec>
    </target>
</project>

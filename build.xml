<?xml version="1.0" encoding="utf-8" ?>
<project name="gss" default="deploy" basedir=".">
	<description>The GSS project build file</description>

	<property file="build.properties"/>
    <property name="deps.dir" value="dependencies"/>

	<!-- User-editable settings. These are the only settings in this file that
	a user may consider changing. Note that these can also be configured
	through	command line parameters (e.g. "ant -Dgwt.workers=2") or a
	build.properties file. -->
    <property name="gwt.workers" value="1" />
    <property name="jboss.home" value="${deps.dir}/jboss-5.1.0.GA" />
    <property name="jboss.args" value="" />
	<property name="solr.root" value="${deps.dir}/apache-solr-1.4.1"/>
    <property name="solr.lib" value="${solr.root}/lib"/>
    <property name="solr.dist" value="${solr.root}/dist"/>
	<property name="solr.home" value="${deps.dir}/apache-solr-1.4.1/example/solr"/>

	<!-- Library and runtime dependencies -->
    <property name="jboss.version" value="5.1.0" />
    <property name="jboss.filename" value="jboss-5.1.0.GA-jdk6.zip"/>
	<property name="jboss.download.url" value="http://switch.dl.sourceforge.net/project/jboss/JBoss/JBoss-${jboss.version}.GA/${jboss.filename}"/>
    <property name="solr.version" value="1.4.1" />
    <property name="solr.filename" value="apache-solr-1.4.1.zip"/>
	<property name="solr.download.url" value="http://apache.ntua.gr/lucene/solr/${solr.version}/${solr.filename}"/>
	<property name="solrj.version" value="1.4.1"/>
	<property name="solrj.jar" value="apache-solr-solrj-${solrj.version}.jar"/>
    <property name="gwt.path" value="${deps.dir}/gwt-2.0.4"/>
    <property name="gwt.filename" value="gwt-2.0.4.zip"/>
	<property name="gwt.download.url" value="http://google-web-toolkit.googlecode.com/files/gwt-2.0.4.zip"/>
    <property name="hornetq.path" value="${deps.dir}/hornetq-2.0.0.GA" />
    <property name="hornetq.filename" value="hornetq-2.0.0.GA.zip/"/>
    <property name="hornetq.download.url" value="http://sourceforge.net/projects/hornetq/files/2.0.0.GA/hornetq-2.0.0.GA.zip/download"/>
    <property name="junit.path" value="${deps.dir}/junit4.8.1" />
    <property name="junit.filename" value="junit4.8.1.zip"/>
    <property name="junit.download.url" value="http://sourceforge.net/projects/junit/files/junit/4.8.1/junit4.8.1.zip/download"/>
    <property name="gwt-dnd.filename" value="gwt-dnd-3.0.1.jar"/>
    <property name="gwt-dnd.download.url" value="http://gwt-dnd.googlecode.com/files/gwt-dnd-3.0.1.jar"/>
    <property name="gwt-gears.path" value="${deps.dir}/gwt-gears-1.3.0" />
    <property name="gwt-gears.filename" value="gwt-gears-1.3.0.zip"/>
    <property name="gwt-gears.download.url" value="http://gwt-google-apis.googlecode.com/files/gwt-gears-1.3.0.zip"/>
    <property name="gwt-visualization.path" value="${deps.dir}/gwt-visualization-1.1.0" />
    <property name="gwt-visualization.filename" value="gwt-visualization-1.1.0.zip"/>
    <property name="gwt-visualization.download.url" value="http://gwt-google-apis.googlecode.com/files/gwt-visualization-1.1.0.zip"/>
    <property name="gwt-incubator.filename" value="gwt-incubator-20100204-r1747.jar"/>
    <property name="gwt-incubator.download.url" value="http://google-web-toolkit-incubator.googlecode.com/files/gwt-incubator-20100204-r1747.jar"/>	
	<property name="selenium-server.filename" value="selenium-server-standalone-2.0b1.jar"/>
	<property name="selenium-server.download.url" value="http://selenium.googlecode.com/files/selenium-server-standalone-2.0b1.jar"/>
	<!-- Source and runtime layout configuration -->
	<property name="jboss_run_configuration" value="default" />
    <property name="root.context" value="gss" />
    <property name="gwt.module" value="gr.ebs.gss.GSS" />
    <property name="gwt.module.class" value="GSS" />
    <property name="gwt.admin.module" value="gr.ebs.gss.admin.TwoAdmin" />
    <property name="gwt.admin.module.class" value="TwoAdmin" />
	<property name="src.dir" value="${basedir}/src"/>
    <property name="jboss-spec.dir" value="${basedir}/jboss" />
    <property name="jboss-spec.conf.dir" value="${jboss-spec.dir}/conf" />
    <property name="jboss-spec.bin.dir" value="${jboss-spec.dir}/bin" />
    <property name="jboss-spec.deploy.dir" value="${jboss-spec.dir}/deploy" />
    <property name="jboss-spec.lib.dir" value="${jboss-spec.dir}/lib" />
	<property name="jboss.project" value="${basedir}/jboss-config/${jboss.version}" />
	<property name="jboss.bin.dir" value="${jboss.home}/bin" />
	<property name="jboss.conf.dir" value="${jboss.home}/server/${jboss_run_configuration}/conf" />
	<property name="jboss.deploy.dir" value="${jboss.home}/server/${jboss_run_configuration}/deploy" />
	<property name="jboss.run_conf.lib.dir" value="${jboss.home}/server/${jboss_run_configuration}/lib" />
	<property name="jboss.lib.dir" value="${jboss.home}/lib" />
	<property name="jboss.common.lib.dir" value="${jboss.home}/common/lib" />

	<property name="solr-spec.dir" value="${basedir}/solr"/>
	<property name="solr-spec.conf.dir" value="${solr-spec.dir}/conf"/>
	<property name="solr.conf.dir" value="${solr.home}/conf"/>
	
	<!-- MBeans -->
	<property name="mbeans.dir" value="${basedir}/mbeans"/>
	<property name="mbeans.meta-inf.dir" value="${mbeans.dir}/META-INF"/>

	<!-- JUnit dirs -->
	<property name="test.dir" value="${basedir}/test" />

	<!-- Build dirs -->
    <property  name="src.dir" value="${basedir}/src}"/>
    <property  name="solr.src.dir" value="${solr-spec.dir}/src"/>
	<property name="build.dir" value="${basedir}/bin" />
	<property name="build.classes.dir" value="${build.dir}/classes" />
	<property name="test.build.dir" value="${build.dir}" />
	<property name="test.build.classes.dir" value="${test.build.dir}/" />
	<property name="gwt.www.dir" value="${basedir}/www" />
	<property name="gwt.www.admin.dir" value="${basedir}/wwwadmin" />
	<property name="dist.war" value="${ant.project.name}.war"/>
	<property name="dist.admin.war" value="${ant.project.name}-admin.war"/>
	<property name="webdav.war" value="webdav.war"/>
	<property name="dist.ear" value="${ant.project.name}.ear"/>
	<property name="war.dir" value="${basedir}/war" />
	<property name="war.web-inf.dir" value="${war.dir}/WEB-INF"/>
	<property name="war.lib.dir" value="${war.web-inf.dir}/lib"/>
	<property name="war.admin.dir" value="${basedir}/waradmin" />
	<property name="war.admin.web-inf.dir" value="${war.dir}/WEB-INF"/>
	<property name="war.admin.lib.dir" value="${war.web-inf.dir}/lib"/>
	<property name="webdav.war.dir" value="${basedir}/webdav" />
	<property name="webdav.war.web-inf.dir" value="${webdav.war.dir}/WEB-INF"/>
	<property name="webdav.war.lib.dir" value="${webdav.war.web-inf.dir}/lib"/>
	<property name="ear.dir" value="${basedir}/ear" />
	<property name="ear.lib.dir" value="${ear.dir}/lib" />
	<property name="mbeans.dist.file" value="${ant.project.name}-mbeans.sar"/>

	<!-- set classpath -->
	<path id="project.class.path">
		<pathelement path="${java.class.path}/" />
		<pathelement path="${gwt.path}/gwt-user.jar" />
		<pathelement location="${jboss.common.lib.dir}/commons-logging.jar"/>
		<pathelement location="${jboss.common.lib.dir}/ejb3-persistence.jar"/>
		<pathelement location="${jboss.common.lib.dir}/jboss-ejb3-ext-api.jar"/>
		<pathelement location="${jboss.common.lib.dir}/jboss-javaee.jar"/>
		<pathelement location="${jboss.common.lib.dir}/jbosssx.jar"/>
		<pathelement location="${jboss.common.lib.dir}/hibernate-core.jar"/>
        <pathelement location="${jboss.common.lib.dir}/hibernate-annotations.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-j2se.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-kernel.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-system-jmx.jar"/>
		<pathelement location="${jboss.lib.dir}/jboss-system.jar"/>
		<pathelement location="${jboss.lib.dir}/jbosssx.jar"/>
		<pathelement location="${ear.lib.dir}/commons-codec-1.4.jar"/>
		<pathelement location="${ear.lib.dir}/commons-configuration-1.6.jar"/>
		<pathelement location="${war.lib.dir}/commons-fileupload-1.2.jar"/>
        <pathelement location="${ear.lib.dir}/commons-httpclient-3.1.jar"/>
		<pathelement location="${ear.lib.dir}/commons-lang.jar"/>
		<pathelement location="${ear.lib.dir}/ldap.jar"/>
		<pathelement location="${junit.path}/junit.jar"/>
		<pathelement location="${deps.dir}/${gwt-dnd.filename}"/>
		<pathelement location="${gwt-gears.path}/gwt-gears.jar"/>
		<pathelement location="${deps.dir}/${gwt-incubator.filename}"/>
		<pathelement location="${gwt-visualization.path}/gwt-visualization.jar"/>
		<pathelement location="${solr.dist}/${solrj.jar}"/>
        <pathelement location="${solr.dist}/apache-solr-core-1.4.1.jar"/>
        <pathelement location="${solr.lib}/lucene-core-2.9.3.jar"/>
        <pathelement location="${solr.lib}/lucene-analyzers-2.9.3.jar"/>	
		<pathelement location="${deps.dir}/${selenium-server.filename}"/>
	</path>

	<target name="check-jboss">
		<available file="${jboss.home}" type="dir" property="jboss.home.present"/>
	</target>

    <target name="fetch-dependencies" description="Fetch the dpendencies" unless="jboss.home.present" depends="check-jboss">
    	<mkdir dir="${deps.dir}"/>
        <get src="${gwt.download.url}" dest="${deps.dir}/${gwt.filename}" usetimestamp="true"/>
        <get src="${gwt-dnd.download.url}" dest="${deps.dir}/${gwt-dnd.filename}" usetimestamp="true"/>
        <get src="${gwt-gears.download.url}" dest="${deps.dir}/${gwt-gears.filename}" usetimestamp="true"/>
        <get src="${gwt-visualization.download.url}" dest="${deps.dir}/${gwt-visualization.filename}" usetimestamp="true"/>
        <get src="${gwt-incubator.download.url}" dest="${deps.dir}/${gwt-incubator.filename}" usetimestamp="true"/>
        <get src="${hornetq.download.url}" dest="${deps.dir}/${hornetq.filename}" usetimestamp="true"/>
        <get src="${junit.download.url}" dest="${deps.dir}/${junit.filename}" usetimestamp="true"/>
        <get src="${jboss.download.url}" dest="${deps.dir}/${jboss.filename}" usetimestamp="true"/>
    	<get src="${selenium-server.download.url}" dest="${deps.dir}/${selenium-server.filename}" usetimestamp="true"/>
    	<unzip src="${deps.dir}/${gwt.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${gwt-gears.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${gwt-visualization.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${hornetq.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${junit.filename}" dest="${deps.dir}"/>
        <unzip src="${deps.dir}/${jboss.filename}" dest="${jboss.home}/.."/>
    </target>

	<target name="install" depends="fetch-dependencies, install-solr" description="Installs the configuration files of the application server">
		<!-- Install HornetQ configuration -->
		<copy todir="${jboss.run_conf.lib.dir}">
			<fileset dir="${hornetq.path}/lib">
				<include name="hornetq-*.jar"/>
				<include name="netty*.jar"/>
			</fileset>
		</copy>
		<property name="hornetq.sar.dir" value="${jboss.deploy.dir}/hornetq.sar"/>
		<mkdir dir="${hornetq.sar.dir}"/>
		<copy todir="${hornetq.sar.dir}">
			<fileset dir="${hornetq.path}/config/jboss-as/non-clustered" includes="*" excludes="**/jboss-as-4/**"/>
		</copy>
		<unzip src="${hornetq.path}/lib/hornetq-ra.rar" dest="${jboss.deploy.dir}/hornetq-ra.rar"/>
		<delete dir="${jboss.deploy.dir}/messaging" failonerror="false"/>
		<mkdir dir="${jboss.bin.dir}/META-INF/lib/linux2/x86"/>
		<mkdir dir="${jboss.bin.dir}/META-INF/lib/linux2/x64"/>
		<copy todir="${jboss.bin.dir}/META-INF/lib/linux2/x86" file="${hornetq.path}/bin/libHornetQAIO32.so"/>
		<copy todir="${jboss.bin.dir}/META-INF/lib/linux2/x64" file="${hornetq.path}/bin/libHornetQAIO64.so"/>
		<!-- Install gss configuration -->
		<copy todir="${jboss.bin.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss.project}/bin"/>
		</copy>
		<copy todir="${jboss.bin.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss-spec.bin.dir}" />
		</copy>
		<copy todir="${jboss.conf.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss.project}/conf"/>
		</copy>
		<copy todir="${jboss.conf.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss-spec.conf.dir}"/>
		</copy>
		<copy todir="${jboss.run_conf.lib.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss.project}/lib"/>
		</copy>
		<copy todir="${jboss.run_conf.lib.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss-spec.lib.dir}" />
		</copy>
		<copy todir="${jboss.deploy.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss.project}/deploy"/>
		</copy>
		<copy todir="${jboss.deploy.dir}" overwrite="true" failonerror="false">
			<fileset dir="${jboss-spec.deploy.dir}" />
		</copy>
        <!-- Make run.sh executable again -->
        <chmod file="${jboss.bin.dir}/run.sh" perm="ugo+x"/>
	</target>

	<target name="compile" description="Compile src to bin">
		<mkdir dir="${build.dir}" />
		<javac srcdir="${src.dir}:${test.dir}" destdir="${build.dir}" debug="on" debuglevel="lines,vars,source" source="1.6">
			<classpath refid="project.class.path" />
		</javac>
	</target>

	<target name="package-code" depends="compile" description="Package up the project code as a jar">
		<jar destfile="${build.dir}/${ant.project.name}.jar">
			<fileset dir="bin">
				<include name="org/json/**" />
				<include name="**/client/AdminService.class" />
				<include name="**/server/**" />
				<exclude name="**/domain/**"/>
				<exclude name="**/ejb/**"/>
			</fileset>
			<fileset dir="src">
				<include name="**/*.xml" />
				<include name="**/client/exceptions/**" />
				</fileset>
		</jar>
	</target>

	<target name="package-webdav" depends="compile" description="Package up the webdav code as a jar">
		<jar destfile="${build.dir}/webdav.jar">
			<fileset dir="bin">
				<include name="**/webdav/**" />
			</fileset>
		</jar>
	</target>

	<target name="package-ejb" depends="compile" description="Package up the EJB classes">
		<jar destfile="${build.dir}/ejbs.jar">
			<zipfileset dir="${basedir}/persistence" />
			<zipfileset dir="${build.dir}">
				<include name="**/configuration/**" />
				<include name="**/exceptions/**" />
				<include name="**/domain/**" />
				<include name="**/ejb/**" />
				<exclude name="**/*Test.class"/>
			</zipfileset>
		</jar>
	</target>

	<target name="check-gwt-compile" depends="compile">
		<uptodate property="compilation-not-needed">
			<srcfiles dir="${src.dir}" excludes="**/server/**"/>
			<mergemapper to="${build.dir}/www/gr.ebs.gss.GSS.nocache.js"/>
		</uptodate>
	</target>

	<target name="gwt-compile" depends="check-gwt-compile" unless="compilation-not-needed" description="Compile client code to JavaScript">
    	<condition property="gwt-dev-lib" value="${gwt.path}/gwt-dev.jar">
	    	<available file="${gwt.path}/gwt-dev.jar" />
    	</condition>
		
		<java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true">
			<!--arg value="-style"/>
			<arg value="DETAILED"/-->
			<arg value="-localWorkers" />
			<arg value="${gwt.workers}" />
			<arg value="-war"/>
			<arg value="${gwt.www.dir}"/>
			<arg value="${gwt.module}"/>
			
		    <classpath>
		        <pathelement path="${gwt-dev-lib}"/>
				<path refid="project.class.path" />
				<pathelement path="${src.dir}" />
		    </classpath>
		</java>
		<mkdir dir="${build.dir}/www"/>
		<copy todir="${build.dir}/www">
			<fileset dir="${gwt.www.dir}/${gwt.module}" excludes="**/${gwt.module.class}.html">
			</fileset>
		</copy>
		<copy file="${gwt.www.dir}/${gwt.module}/${gwt.module.class}.html" tofile="${build.dir}/www/index.html" />
	</target>
	
	<target name="package-war" depends="gwt-compile, package-code" description="Package up the web part as a war">
		<jar destfile="${build.dir}/${dist.war}">
			<zipfileset dir="${war.dir}" >
			    <exclude name="**/classes/**"/>
			</zipfileset>
			<zipfileset dir="${build.dir}/www" />
			<zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
				<include name="${ant.project.name}.jar" />
			</zipfileset>
		</jar>
	</target>
	
	<target name="check-gwt-admin-compile" depends="compile">
		<uptodate property="compilation-not-needed">
			<srcfiles dir="${src.dir}" excludes="**/server/**"/>
			<mergemapper to="${build.dir}/wwwadmin/gr.ebs.gss.admin.TwoAdmin.nocache.js"/>
		</uptodate>
	</target>

	<target name="gwt-admin-compile" depends="check-gwt-admin-compile" unless="compilation-not-needed" description="Compile client code to JavaScript">
    	<condition property="gwt-dev-lib" value="${gwt.path}/gwt-dev.jar">
	    	<available file="${gwt.path}/gwt-dev.jar" />
    	</condition>
		
		<java classname="com.google.gwt.dev.Compiler" failonerror="true" fork="true">
			<!--arg value="-style"/>
			<arg value="DETAILED"/-->
			<arg value="-localWorkers" />
			<arg value="${gwt.workers}" />
			<arg value="-war"/>
			<arg value="${gwt.www.admin.dir}"/>
			<arg value="${gwt.admin.module}"/>
            <jvmarg value="-Xmx128m"/>						
		    <classpath>
		        <pathelement path="${gwt-dev-lib}"/>
				<path refid="project.class.path" />
				<pathelement path="${src.dir}" />
		    </classpath>
		</java>
		<mkdir dir="${build.dir}/wwwadmin"/>
		<copy todir="${build.dir}/wwwadmin">
			<fileset dir="${gwt.www.admin.dir}/${gwt.admin.module}" excludes="**/${gwt.admin.module.class}.html">
			</fileset>
		</copy>
		<copy file="${gwt.www.admin.dir}/${gwt.admin.module}/${gwt.admin.module.class}.html" tofile="${build.dir}/wwwadmin/index.html" />
	</target>
		
	<target name="package-admin-war" depends="gwt-admin-compile, package-code" description="Package up the web part as a war">
		<jar destfile="${build.dir}/${dist.admin.war}">
			<zipfileset dir="${war.admin.dir}" >
				  <exclude name="**/classes/**"/>
            </zipfileset>
			<zipfileset dir="${build.dir}/wwwadmin" />
			<zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
				<include name="${ant.project.name}.jar" />
			</zipfileset>
			<zipfileset dir="${gwt.path}" prefix="WEB-INF/lib">
				<include name="gwt-servlet.jar" />
			</zipfileset>
		</jar>
	</target>

	<target name="package-webdav-war" depends="package-webdav" description="Package up the WebDAV part as a war">
		<jar destfile="${build.dir}/${webdav.war}">
			<zipfileset dir="${webdav.war.dir}" />
			<zipfileset dir="${build.dir}" prefix="WEB-INF/lib">
				<include name="webdav.jar" />
			</zipfileset>
		</jar>
	</target>

	<target name="package-mbeans" depends="compile">
		<jar jarfile="${build.dir}/${mbeans.dist.file}" basedir="${build.dir}">
			<include name="**/mbeans/**"/>
			<metainf dir="${mbeans.meta-inf.dir}"/>
		</jar>
	</target>
	
	<target name="package-ear" depends="package-admin-war, package-war, package-webdav-war, package-ejb, package-mbeans" description="Package up the project as an ear">
		<jar destfile="${build.dir}/${dist.ear}">
			<zipfileset dir="${ear.dir}" />
			<zipfileset dir="${build.dir}" >
				<include name="ejbs.jar" />
				<include name="${dist.war}" />
				<include name="${webdav.war}" />
                <include name="${dist.admin.war}" />
				<include name="${mbeans.dist.file}"/>
			</zipfileset>
    		<zipfileset dir="${solr.dist}" prefix="lib">
				<include name="${solrj.jar}" />
			</zipfileset>
		</jar>
	</target>

	<target name="deploy" depends="package-ear" description="Deploy the project to the server">
		<copy todir="${jboss.deploy.dir}" file="${build.dir}/${dist.ear}"/>
	</target>

	<target name="redeploy" depends="package-ear" description="Redeploy the project to the server">
		<copy todir="${jboss.deploy.dir}" file="${build.dir}/${dist.ear}" overwrite="yes"/>
	</target>

	<target name="undeploy" description="Undeploy the project from the server">
		<delete file="${jboss.deploy.dir}/${dist.ear}"/>
	</target>

	<target name="clean" description="Delete the contents of the bin and www directories">
		<delete dir="${build.dir}"/>
		<delete dir="${gwt.www.dir}"/>
		<delete dir="${gwt.www.admin.dir}"/>
	</target>

    <target name="deinstall"
    	description="Delete the contents of the JBoss home directory">
        <delete dir="${jboss.home}"/>
    </target>

    <target name="distclean" depends="deinstall, clean"
        description="Delete the contents of the JBoss home directory and all downloaded artifacts">
        <delete dir="${deps.dir}"/>
    </target>

	<target name="test" description="Performs unit tests on the project" depends="compile">
		<available
		      property="junit.present"
		      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
		      classpathref="project.class.path"/>
	    <fail unless="junit.present">
	      ##################################################################
	      JUnit not found.
	      Please make sure junit.jar is in ANT_HOME/lib, or made available
	      to Ant using other mechanisms like -lib or CLASSPATH.
	      ##################################################################
		</fail>

		<junit printsummary="withOutAndErr" fork="yes" haltonfailure="yes">
			<classpath refid="project.class.path"/>
			<formatter type="plain"/>
			<batchtest todir="${test.build.dir}">
				<fileset dir="${test.build.classes.dir}">
					<include name="**/*Test.class"/>
				</fileset>          
			</batchtest>

		</junit>
	</target>

	<target name="run" description="Starts the server" depends="deploy">
        <exec executable="${jboss.bin.dir}/run.sh" osfamily="unix">
            <arg line="${jboss.args}"/>
        </exec>
		<exec executable="cmd" osfamily="windows">
		    <arg value="/c"/>
		    <arg value="${jboss.bin.dir}/run.bat"/>
            <arg line="${jboss.args}"/>
		</exec>
    </target>
    
	<target name="check-solr">
		<available file="${solr.root}" type="dir" property="solr.home.present"/>
	</target>

    <target name="fetch-solr" unless="solr.home.present" depends="check-solr">
		<get src="${solr.download.url}" dest="${deps.dir}/${solr.filename}" usetimestamp="true"/>
    	<unzip src="${deps.dir}/${solr.filename}" dest="${deps.dir}"/>
    </target>

    <target name="compile-solr" depends="fetch-solr">
        <mkdir dir="${build.dir}"/>
        <javac srcdir="${solr.src.dir}" destdir="${build.dir}" debug="on" debuglevel="lines,vars,source" source="1.6">
            <classpath refid="project.class.path" />
        </javac>
    </target>

    <target name="install-solr" depends="fetch-solr, compile-solr">
		<copy todir="${solr.conf.dir}" overwrite="true" failonerror="false">
			<fileset dir="${solr-spec.conf.dir}" />
		</copy>
		<jar destfile="${solr.root}/greektokenfilter.jar">
		    <fileset dir="${build.dir}">
				<include name="gr/ebs/gss/solr/analysis/GreekLowerCaseFilterFactory.class"/>
		    </fileset>
		</jar>
    </target>
    
    <target name="run-solr" depends="install-solr">
        <java jar="${solr.root}/example/start.jar" fork="true" dir="${solr.root}/example"/>
    </target>
</project>
